
14 июля 2018 - работы в начале проекта кода новой версии Оператор

По этим требованиям надо придумать архитектуру главной формы и вообще программы Оператор.
Я сейчас собираю требования к функциональности. 
Потом для них нужно придумать компоновку и устройство приложения.
А то просто помаленьку добавлять фичи не получается - все это слишком сложное и требует совокупного проектирования кода.

1 Создать Проект студии Оператор, если он еще не создан - сделано
1.1 установить для проекта архитектуру процессора х86, чтобы БД работала в 64-битных Виндовсах - сделано.
1.2 найти и поставить подходящую иконку для приложения как appicon.ico. - сделано.
   - можно было бы поставить иконку Нео из Матрицы, но иконки не нашел. Да и она не стилизованная, будет плохо смотреться.
     Все-таки у меня тут утилита, а не художественное произведение.
   + Матрица большая, ее и поставил как иконку везде: в иконку трея, иконку формы, иконку приложения.

2 Добавить в солюшен инфраструктуру: файлы тодо реадме итп - сделано, 
  - надо наполнить их правильным текстом.
3 Собрать исполняемый файл, пока пустой - сделано
4 Сделать инсталлятор в автозагрузку. Пока только на сам исполняемый файл.
  + Сделано, вроде успешно сейчас. Приложение загружается, все как и должно быть.
    Только задержка между появлением рабочего стола и готовностью к работе с ним уж очень заметна.
4.1 Для предотвращения запуска второго приложения добавить именной мутекс.
  + добавлено, см. файл Program.cs, можно усовершенствовать позднее.
    - надо бы передавать в старую программу командную строку от новой, как событие особого типа.
    - надо бы показывать окно предыдущего экземпляра программы вместо нового.
    - это не обязательно сейчас, можно отложить на потом.
    - если ярлыка Оператор не будет на рабочем столе, запускать его пользователь не будет.
      Тогда и повторного запуска не будет, так что пока можно обойтись только мутексом. 
  + Добавить имя мутекса в скрипт установщика для AppMutex=Operator 
    + сделано, проверено, работает. Нельзя установить новый Оператор, пока запущен старый Оператор. 
  
5 Сделать сворачивание в трей, меню трея Выход по правому клику, развертывание из трея по левому клику.
  - сделано, но требует дополнительного внимания.
  - разворачивание сейчас по двойному клику - а надо по одиночному.
    - не получится - кривой NotifyIcon. 
       Работает только так: восстанавливает окно по двойному клику, показывает контекстное меню по левому клику.
       И то не всегда устойчиво - это поведение не гарантируется.
  + иконка приложения сразу показывается в трее, а не только после сворачивания - исправлено.
     Был ошибочно включен показ иконки сразу при инициализации формы.
  - сворачивать в трей вместо закрытия окна крестиком.
  - в меню Файл добавить пункт Закрыть, который закрывает приложение.
  - Запускать приложение сразу свернутым в трей - опция в Настройках приложения. Включить по умолчанию.
  - переработать сворачивание окна в трей так, чтобы:
    - оно показывалось отовсюду одной функцией, 
    - сворачивалось в трей другой функцией, и при закрытии и при свертывании.
    - все функции помещались в регион нотифиикон и были откомментированы
    - приложение запускалось сразу свернутым в трей, если в настройках приложения не указано другое.
    
6 Добавить в проект  шаблон БД. - сделано 
6.1  Добавить БД в ресурсы приложения. - Сделано, хотя сейчас не необходимо.
  Наполнять БД будем позже.
6.2 Добавить в проект класс адаптера БД  из MyCodeLibrary - сделано.
7 Сделать развертывание БД при старте приложения, если ее нет
  - это надо сначала обдумать. 
    Если БД не найдена, то нельзя просто создать новую БД - надо сообщить пользователю о проблеме и ждать когда он ее исправит. 
     Создать новую БД сложно - надо сканировать рабочую среду итп. Надо попытаться из бекапа ее восстановить.
    - Создание новой БД и ее заполнение должно быть отдельной командой пользователя сделано.
     Возможно, пока из меню приложения, а не текстовой командой. 
      Храниться БД должна в папке локальных данных приложения, а не рядом с приложением.
      Эту папку можно получить из настроек приложения или через функцию локальное хранилище.

8 Сделать заготовку chm-справки и добавить ее в проект
  - для этой справки надо хотя бы первую ее страничку сделать. Пока ее нет - нет и справки.
  - создан файл справки пустой = 0. Надо его наполнить содержанием, хотя бы из Readme.txt.

9 ... дописать сюда реальные фичи из вики проекта Оператор:

9.1 придумать очередь уведомлений пользователю, и как ее отображать всплывающими балунами в трее.
    - только когда оператор свернут в трей. Когда же развернут, то показывать их другим способом. 
    - функции иконки трея накиданы, нужен теперь собственно механизм очереди собщений.
    - отложено на будущее, пока нет необходимости.
    - если окно свернуто в трей, показывать уведомлениями важные события.
		- этот показ надо иметь возможность програмно отключать и включать во время сеанса работы Оператора. 

9.2 Зарегистрировать глобальный хоткей для окна Оператора, чтобы вызывать окно из-под других окон.
    Alt+Win+F1 или F12 должен показывать окно Оператора и из трея, и с заднего плана.
    - Alt+Win+F1 как хоткей может быть зарегистрирован - проверено на тестовом образце.
    - F12 уже используется в ОС, его нельзя применить здесь.
    - нужна функция Показать окно, которая и будет его разворачивать из любого места.
    - нужна переменная состояния, в котором находится окно: свернуто на таскбар, в нотифиикон, развернуто.
    + Отменить. Есть идея лучше: много хоткеев и канал событий хоткеев. Поэтому хоткей окна Оператора - лишь один из них.
9.3 Зарегистрировать десяток глобальных хоткеев для пользовательских операций.
    Это будут типа хоткеи для команд, но привязку к команде определяет пользователь в настройках Оператора.
    При этом собственно окно вообще может не показываться, а только делать назначенную хоткею работу.
    Например, дампить текст из текущего активного окна, и потом вставлять его обратно. 
    Для этого удобно использовать клавиши F1-F12 с модификатором Alt+Win, если он работает.
    + Сделано, но еще нужен канал сообщений хоткеев.
      Пока сообщения выводятся в строку состояния приложения, для демонстрации работы хоткеев.
    - идея в том, что приложение при загрузке регистрирует линейку хоткеев для своих операций.
        При завершении работы приложения хоткеи разрегистрируются соответственно.
        Событие нажатия хоткея не обрабатывается кодом непосредственно, а попадает в канал сообщений хоткеев.
        В виде строки названия хоткея - этого достаточно для обработки события, и это понятно пользователю.
        Там на каждый хоткей пользователь назначает команду-обработчик.
        Выводится пользователю сообщение о нажатом хоткее, и о сопоставленной ему команде или процедуре.
        Если обработчик - команда/процедура не назначен, событие соответственно ничего не исполняет.
        Эти соответствия хранятся в файле настроек Оператора. И загружаются в канал событий или как-то так.
        Это надо еще придумать.
        Показ окна Оператора тоже сделан через такую процедуру, и можно переназначить его на любой из хоткеев.
    - перенести код в класс и неймспейс: Hotkey.GlobalHotkeyController
      + создан неймспейс Operator.Hotkey
      Так будет проще добавлять функциональность для хоткеев, особенно сервисную.
      Основная функциональность уже сделана, а еще есть дополнительная:
      - выявлять хоткеи, которые не удалось зарегистрировать.
      - функции канала событий хоткеев.
      Проблема: Нужен лог. Функции окна сейчас должны использовать лог, чтобы сообщать о невозможности создания хоткея.
      Но лога нет пока. Где его размещать - непонятно.
      Решение: Пока отложить перенос кода в собственный класс, пока нет понимания, как реализовать лог.
      Когда будет лог, тогда придумаем перенос кода хоткеев.
         
9.4 Показывать состояние Оператора, текущую дату и время в строке состояния Оператора.
    + Сделано, работает. Непонятно, зачем это надо.
    + Создать строку состояния.
    + Показывать состояние Оператора как длинную строку текста.
      + private void setStatusText(string text, bool update)
    + Показывать текущую дату и время, где месяц и день недели выражены текстом.
      + обновлять по таймеру, нужен таймер. Вероятно, общий на все оконные нужды.
      - а зачем эта дата в строке состояния нужна? Ладно, раз сделали, пусть будет.
        Но она не необходима, только полезна.
        
9.5 Регулировка яркости дисплея при запуске ?
    - повышение яркости при просмотре фильма (запуске плеера) 
      и понижение при  окончании просмотра (завершении плеера)
      - требует работающую подсистему команд и прогу-регулятор яркости дисплея.
      - требует контроль запуска, завершения процессов, поиск процессов.
      
9.6 Ведение лога действий в папках вроде МоиПроекты.
    - если проекты помещены на флешку, то не доступны постоянно.
    - Проверять, что эти папки доступны.      
    - требует контроль изменений ФС
    - требует список мест контроля ФС
    - требует контроль событий подключения и отключения дисков
    - требует работающую подсистему команд, чтобы обрабатывать любые места, заданные пользователем.
    - лог нужно отключать во время бекапа проектов
9.7 Бекап проектов, когда архивный винт подключен.
    - требует алгоритм бекапа в виде утилиты или скрипта.
    - требует контроль событий подключения и отключения дисков 
    - требует работающую подсистему команд      
9.8 У Оператора должен быть собственный каталог, пригодный для архивации моей программой.
    - в нем должны храниться настройки приложения
    - в нем должны храниться БД, файлы скриптов, сборки методов и пакеты знаний.
    - каталог данных приложения, назначенный системой, не годится.
    - можно разместить его в корне диска С или по свободному пути,
      - тогда путь к каталогу Оператора получать по пути исполняемого файла Оператора.
        Это позволит не искать каталог Оператора как-то еще. 
        И устанавливать оператор просто распаковкой из архива. 
        
9.9 Вести лог приложения.
    - создать лог для записи всех событий Оператора - много файлов, по одному на сеанс.
    - создать лог для записи только команд Оператора, с результатом исполнения (Успех-Отказ) - один файл на все.
    - создать лог для записи только неопознанных команд Оператора - один файл на все.
    - требуется каталог Оператора -> каталог логов Оператора.
    - требуется менеджер логов Оператора для работы с логами, особенно логом событий - их много получится, нужен целое хранилище файлов.        

10 придумать архитектуру системы в целом - это долго и сложно.

100 ... дописать сюда новые фичи, если придумаю их. 

- сканирование файловой системы на Места? Это трудоемко и ФС часто изменяется. Лучше считать их сразу местами, из того что есть.
-- придется ввести места вручную - папки для контента, папку временную, сетевые диски итп.
   Еще есть веб-адреса, коллекции программ, итп. 
   Для всех них нужны пользовательские имена, со склонениями. Их точно придется вводить вручную.
   А еще и описания для мест нужны текстовые короткие, и комментарии длинные. 
   И классы мест.
   УАМХ, в общем.

-----------------------------------------------------------
18:47 21.07.2018 - собираю проект в архив, чтобы использовать как бекап для исследований.
Если не получится, откачусь сюда.

Что сделано:
- Главная форма приложения (строка состояния, строка меню, пункт Файл-Выход). 
  Еще надо придумать удачный расклад остальных контролов формы.
- Линейка хоткеев для канала хоткеев
- сворачивание в трей, меню иконки трея, код обвязки.
  Но реализовано топорно. Надо бы переработать на что-то получше.
- Блокирование запуска второй копии приложения.
  Мутекс используется также в инсталляторе.
  Вторая копия выводит сообщение о том что она копия, и завершается.
- создана заготовка БД и помещена в ресурсы приложения.
  Добавлен класс адаптера БД.
- найдена приличная иконка для приложения  
- сделаны функции для показа текстов и текущего времени в строке состояния.
- добавлена перегрузка функции оконных сообщений.
- добавлен таймер на 480мс.
- Инсталлятор сделан и работает.
  Файлы стандартного инсталляционного набора созданы, но не наполнены содержанием. 
- Справка добавлена как пустой файл пока.

Все тестировано, все работает. 
Компилировать для х86 платформы, иначе не будет работать на 64-битной винде. 


26 июля 2018
- добавляем подсистему лога:
  - добавляем пространство имен: LogSubsystem
  - добавлен класс настроек приложения: OperatorSettings
  - добавлен класс версии оператора и подсистем:  OperatorVersion (Version.cs)
    + класс готов для тестирования
  - добавлен класс текстового сообщения лога: LogMessage
  - добавлен класс менеджера лога: LogController
  - добавлен енум кода сообщения лога: LogMessageCode
  
29 июля 2018
- исправления для подсистемы лога:
  + оконная функция таймера генерирует 1-с события.
    - но отправлять их сейчас некуда - объект лога не создается в классе формы.  
      Их надо отправлять в движок, оттуда они будут в лог направляться.
  - добавлены функции для таймаута файлов лога.
    - но в целом этот механизм не готов - он в начальной стадии.
      Нужно учитывать многопоточность Оператор, а вся структура Оператор пока не известна.
- разрабатываю Движок
  - создан неймспейс Engine для хранения кода для движка, кроме класса самого движка.
  - создан класс движка OperatorEngine, пока заготовка.
  - созданы классы-аргументы для событий движка и лога.
    - но сами события еще не реализованы полностью.
+ Сделаны входные события окна для канала клавиш управления исполнением
  - Управление клавишей Pause
    - Pause приостанавливает или продолжает исполнение процедур Оператором
    - Shift+Pause останавливает выполнение всех процедур Оператором.
    - это все надо представить себе лучше. Сейчас все это очень отрывочно.
      Надо спроектировать весь процесс исполнения процедур, как их можно прервать или приостановить.
      Но это слишком сложно сейчас - надо всю систему разработать сначала.
      И это слишком много функционалности для одного прототипа сразу, получается.
      Велик риск не справиться с разработкой такой сложной системы.
      - Надо постепенно вводить эти функциональности и каналы событий.
        Заодно и перерабатывать и упрощать уже существующие части системы. 
  
30 июля 2018
- накидал класс событий питания и сеанса пользователя SystemEventCanalizator.
  Для одноименного канала движка.
  Надо тестировать. Код экспериментальный.
  - сначала в форме весь код разместил, потом решил перенести в отдельный класс.
    Это разгрузило форму от этого сырого кода.
  - сделал инициализацию и завершение объекта класса в Form.Load и Form.FormClosing соответственно.
  - тестировал, вроде работает, но без лога событий не могу посмотреть работу в деталях. 
  - надо описать работу канала и виды событий в вики - иначе потом хрен поймешь, что как и почему так сделано. 
- добавил объект движка в форму, сделал инициализацию и завершение движка в Form.Load и Form.FormClosing соответственно.
  - надо не забыть присоединить к форме все каналы и события движка, их много.
- в функции Form.Load и Form.FormClosing добавил отправку сообщений в лог движка через канал лога движка.
  Теперь лог движка доступен в главном окне и можно писать в него события главного окна, если это полезно.
  - надо установить код таких сообщений лога. Сейчас код-местодержатель.
+ сделал шаблон-заготовку для записи в лог - в конце файла кода главного окна. 
  Возможно, он пригодится при последующем написании кода.
  А перед релизом его можно удалить.     
                   
31 июля 2018
- добавил вызов функции счетчика таймаута Лога из Движка.
  - нужно сделать закрытие и открытие и использование файлов лога потокобезопасно.
  - хорошо бы на Лог выделить собственный поток с очередью команд-сообщений.
    Тогда не будет проблем с синхронизацией потоков - весь лог будет обслуживать один поток.
    Зато отладка проекта усложнится сильно.  
    
05 августа 2018
- разработал систему лога, более простую чем Тапп, рассчитанную на много потоков, отправляющих сообщения.
  - сейчас она в виде кусочных прототипов. 
    Их надо предварительно свести в один проект и опробовать работу как отдельного компонента - подсистемы лога.
    А потом уже добавлять в Оператор.
    Иначе тестировать весь этот клубок пожеланий будет очень трудно.                      

12 августа 2018
+ добавил подсистему лога в Оператор. Компилируется. Надо тестировать.
  Ранее протестировал и отладил ее на прототипе (XmlWriterTest в папке материалов проекта).
  Затем перенес ее в этот проект.
  Хотя я не уверен что ничего не упустил, возможно, что-то не будет работать правильно.
  Надо тестировать всю работу вместе с подсистемой лога, она очень сложная.

22 августа 2018
+ добавил класс VariablesCollection для хранения переменных сеанса Оператора: или только в памяти, или с сохранением в файл и загрузкой в следующем сеансе.
  - не решил еще, надо ли его использовать - не знаю, для чего он может потребоваться.
  - тестировал на прототипе, добавил класс в MyCodeLibrary.     