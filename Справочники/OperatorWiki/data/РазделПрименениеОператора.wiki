++ Раздел Применение Оператора
[template: ШаблонСтраницыРазделаКонцепции]
Состояние: [//ДОПОЛНИТЬ]

Тут должны располагаться самые первичные идеи, тексты о применении Оператора.
Их нужно свести как список применений, отдельных и самостоятельных Единиц применения Оператора.
Затем их нужно развить и превратить в наборы требуемой функциональности Оператора, которые нужно перечислить и описать на странице РазделФункциональностьОператора, по каждой Единице применения отдельно.
    * а сейчас я смешал Применение и Функциональность, это неправильно.
* todo: надо выбрать отсюда вопросы для развития концепции. Чтобы превратить их в детали концепции.
    * Проработать и внести как пункты в РазделАрхитектураОператора и РазделФункциональностьОператора. 
* todo: надо просмотреть мой дневник, поискать в нем идеи применения Оператора. прямых идей там нет, но могут возникнуть по ходу чтения.
* todo: У меня тут есть списки, что пользователь делает на компьютере. Надо их осмотреть и составить для них список необходимых [Команда] для всех этих действий. Включая обслуживание компьютера, корзину, почту, флешки, подключаемые плееры и смартфоны, сеть итд.

+++Ссылки раздела
* ГлоссарийОператор
* wikirel://../SpeakWiki/SpeakWiki.wiki?page=ИсследованиеЧтоПользовательДелаетНаКомпьютере
* wikirel://../SpeakWiki/SpeakWiki.wiki?page=СборСценариевРаботыПользователя
* wikirel://../SpeakWiki/SpeakWiki.wiki?page=ПрименениеРИ

+++Содержание раздела
++++Общее описание
Это программа, которая работает на компьютере.

Что она делает:
-принимает введенные с клавиатуры тексты - [Команда]ы
-выводит на экран тексты-сообщения
-выполняет [Команда]ы, производя некоторые изменения в содержимом компьютера.

Для чего она может использоваться:
- для отработки технологий
- для выполнения операций на компьютере.
  - эти операции надо сначала алгоритмизовать и написать скрипт или программу.

В сущности, эта программа предоставляет для всех прочих программ единый интерфейс.
Реальная же работа должна осуществляться специально разработанными скриптами и программами.
Которые эта программа скрывает за единообразным интерфейсом.
Именно эти скрипты и программы выполняют реальную работу на компьютере.
Именно их количество повышает производительность пользователя компьютера.
Эта программа только придает всему этому комплексу удобный единообразный интерфейс, который сокращает затраты пользователя на использование всех этих разных инструментов.
И для каждого инструмента эту программу надо настраивать.

++++Как Оператор улучшит мои работы
Как Оператор может улучшить мои возможности?
Это вторая уже заметка на эту тему - попробую тут сжато изложить тему и потом, возможно, развить ее.

1) Оператор может создать мне новые возможности
- я пока не представляю себе, что это за новые возможности, но в теории это полезно.
2) Оператор может частично автоматизировать существующие у меня процессы.
- тут все правильно, это я хочу получить.
3) Оператор может выполнять работы, пока я занят другими делами и не могу работать над моими проектами.
- Например, может выкачивать из интернета какие-то данные. 
-- Хотя их сначала надо найти и выяснить, как скачать, но это все же не то, что сидеть и качать вручную.
-- Это предполагает, что я могу вести диалог с Оператором, пока где-то занят - через смартфон и интернет.
- Или автоматически конструировать что-то, но это пока фантастика.

Так, тут есть новый термин - процессы.
Все мои работы это, в сущности, процессы. 
Я их выполняю по неким алгоритмам, манипулируя сущностями реального мира.  
Эти процессы хорошо бы формально записать как-то где-то, чтобы потом подумать, как их можно частично автоматизировать, используя базы данных и алгоритмы.
Так можно сократить часть работ, снизить сложность процесса и ускорить его в итоге. Хотя не всегда.
Какие-то кусочки процессов удастся автоматизировать, но не весь процесс целиком, точно.

У меня в основном процессы либо работают с сущностями реального мира, которые нельзя завести в компьютер для автоматизации, либо требуют умственного труда, который пока сложно автоматизировать. 
В этом еще есть проблема - существующие приложения и инструменты не поддерживают автоматизацию их использования. 
Например, википад нельзя использовать из другого приложения так, чтобы автоматически читать и писать страницы в нем. Хотя там есть какая-то автоматизация, но ее использовать еще сложнее, чем написать собственный википад с требуемыми функциями.  

+++++Выводы
Выводы пока такие:
- Я совсем не понимаю, что именно нужно делать. И написание текстов не проясняет ситуацию, а запутывает ее.
Надо или найти хорошую книжку по этой теме, или накопить больше материала, чтобы этот туман стал обретать формы.
- Надо документально описать мои процессы, чтобы попытаться их автоматизировать. Это должны быть сложные процессы, потому что автоматизация должна окупиться. Пример: Бекап проектов - столько возни с ним вручную было. Сейчас запустил, ушел пить чай. Но это должны быть небольшие кусочки, так как только в них можно реализовать такой прямой и жесткий алгоритм выполнения работы, какой можно реализовать кодом. Более сложные веши кодом нельзя пока реализовать.
-- сначала надо отобрать такие процессы в список. Потом неоднократно пытаться их формально описать, придумывая правила описания в процессе самого описания. Потом выделять в них куски - функциональную декомпозицию провести. Потом отобрать те части, что можно автоматизировать. Потом собрать все это обратнов процессы. Это сложная работа, и не всегда это получится лучше чем было раньше.
- Сейчас рабочей силой пока являюсь я сам. Разгрузка меня от мелких формальных задач ускорит мою работу. Но сначала эта мелкая формальная задача превращается в большую проблему, которую я пытаюсь автоматизировать. Только после того, как я напишу достаточно универсальный алгоритм, эта задача становится более-менее решенной. И эти описания решений автоматизации потом надо где-то хранить, чтобы не забыть, как и почему они устроены, и в каких ситуациях они неприменимы. Вот хорошо бы это хранить вместе с самим алгоритмом, чтобы не забывать и находить вовремя.
-- можно в Оператор внести эти штуки. Эти методы. И потом с ними работать. Обслуживать их. Еще и их придется обслуживать... Будет ли выигрыш в этой автоматизации? Надо продумать этот аспект.

+++++Мысли вслух
Оператор задумывался как средство выполнения моих команд. Как возможность автоматизировать работы, сосредоточиться на целях, не отвлекаться на всякие инфраструктуры: где разместить фотку, чем открыть, где она сейчас лежит, итд. Я хотел, чтобы мне остались функции управления: выбор объекта, выбор метода, принятие решений итп. Чтобы мне работать только с семантикой: название объекта, название алгоритма, а Оператор сообщал мне о успехе или предупреждал о ограничениях и прогнозировал успех или неудачу исполнения.
Сейчас Оператор очень простой, и может только комп выключать и музыку запускать, ну и открывать указанные файлы. Это я и сам делаю мышкой. Я его забросил пока, не развиваю, так как он пока не способен на большее. А его текстовый интерфейс мне пока не нравится - проще мышкой кликать сейчас. Вот с этим надо что-то делать. А больше некому, кроме меня.  

Сейчас получается два способа работы на компьютере: ГУЙ с мышкой и консоль Оператора. ГУЙ привычный и разнообразный, детальный способ. Текстовый интерфейс Оператора пока очень примитивен. Ему не хватает проработанности и он требует настроенной для него системы. Вот и функциональность у него никакая. Хотя идея вроде бы ничего так - не искать, где лежит, а просто описывать текстом, что я хочу сделать и с чем. Но пока приходится искать, где лежит.

++++Критика
Сейчас Оператор практически бесполезен. Я им не пользуюсь, так как нет применений.
* Он не работает с моей рабочей средой.
* Он ничего полезного не умеет делать.
* Главная проблема - мало возможностей. Их надо добавлять. Хотя бы автоматизировать управление сущностями и операциями.
* В нем сейчас фиксированная система команд. А я эти команды не помню, поэтому ввожу команды свободным текстом.

Сейчас Оператор малопригоден к чему-либо. Он выполняет простые [Команда]ы.
Нужно добавить в него поддержку КонтекстЗадачи, чтобы выполнять сложные [Задача]и.
Поддержку распознавания смысла текста я не могу добавить, так как для этого сначала надо создать стабильную базу словоформ, которая бы постоянно, обыденно располагалась на компьютере и несколько интегрировалась бы уже в общую его работу.

Только все это надо делать, а в это время некогда заниматься тем, для чего все это нужно. Соответственно, надо сосредоточиться на том, для чего нужны эти планировщики, а не на изготовлении игрушек. Я слишком занят расходной частью, и не работаю над доходной частью процесса.

++++Критика2
Как оператор позволит мне ускорить остальные проекты?
Оператор все равно надо делать.
Но время, затраченное на его разработку, сборку, отладку, отодвинет остальные проекты.
Сейчас надо выяснить, насколько оператор ускорит остальные мои проекты, имеет ли смысл его делать в первую очередь.
Сейчас процесс разработки интерактивен, в [Команда]ной строке нечего делать. Поэтому Оператор тут малопригоден.
Это вероятно даже более сложный проект, чем остальные. Поэтому Оператор тут выглядит недостаточо пригодным. Он предполагает разработку множества сторонних технологий. Оператор просто автоматизирует работу, которую нужно продеоывать неоднократно. Он хорош в разборе множества однотипных объемов данных. То есть, например, в проекте Вордс, и то надо мудрить. Вордс это просто одноразовая но очень большая [Задача]а. И для таких [Задача] проще написать скрипт или приложение.
Оператор хорош будет в [Задача]ах, которые касаются ведения документации и каких-то повторяющихся ежедневных действиях - напоминаниях и прочим подобным.
Но моя работоспособность ограничена свободным временем. А я его трачу на всякую фигню, в том числе на эту диктовку текста. 
Так что оператор нам ничем особенно сейчас не поможет, разве что сократит объем путаницы немного. А на его разработку уйдет куча времени.


+++Примеры применения Оператор
++++Пример: Планировщик задач - переработать с учетом диалогов РИ

Такая система должна работать подобно тому как сделано в Инвентаре, но еще и выводить данные.
Например, можно, как в википаде, обозначать [Задача]у ключевым словом Сделать: 
СДЕЛАТЬ Название задачи ГДЕ перечень свойств задачи подобно Инвентарь.
СДЕЛАТЬ Название задачи С дата начала ДО Дата окончания ГДЕ перечень свойств задачи подобно Инвентарь.

Это такой достаточно фиксированный формат скрипта создания [Задача]и получается, близкий к обычному способу описания [Задача]и. 
+++++Недостатки:
- надо помнить формат - это проблема, даже если его описание легко доступно. В частности, надо помнить имена параметров. В диалоге эти имена отображены надписями и контролами, понятны и удобны для манипуляций. В тексте таких подсказок нет, надо помнить имена и типы данных для параметров. Но можно использовать уточняющие вопросы или интерактивные контекстные подсказки, это несколько упростит работу.
- много текста надо набирать - ну, это вот такой способ, речевой, основанный на семантике и сущностях. Зато изучать ничего не надо, сиди себе и набирай тексты.
+++++Достоинства:
- [Задача]а создается простым текстом, удобна для восприятия и кроссплатформенно.
- Не надо запоминать особенности поведения графического интерфейса.

Эту тему можно развить до того, чтобы просто текстом управлять всем этим планировщиком и ведение [Задача] и всем остальным.
Инвентарь удобно интегрировать в планировщик, чтобы ресурсы для [Задача] выделять и наоборот, связывать [Задача]и по обслуживанию ресурсов с самими ресурсами.
Также удобно в планировщик интегрировать файловое хранилище, как систему хранения документов. И прочие наработки по проекту органайзера.

++++Пример: Оператор для обработки естественного языка
Можно более мне специализироваться на обработке естественного языка, 
чтобы быстро интегрировать голосовой интерфейс в разрабатываемые приложения. 
Если я сосредоточусь на этом направлении, то будет определенный спрос на рынке. 
Но этим надо заниматься, и еще вопрос, удастся ли мне реализовать этот потенциал.
Пока что у меня стабильно плохо с этим.

И тут нужен проект КоллекцияСлов. который хранит слова, обозначающие сущности, и у которых есть еще формы - оттенки, которые обозначают смысл применения сущностей в контексте запроса. Это надо где-то хранить, поэтому нужен еще и Тапп24, нормальный, полноценный с методами. И эту систему надо еще расширять, ориентируясь на классы слов как классы сущностей.

++++Пример: Как органайзер и секретарь
Для работ по проектам полезен секретарь, обеспечивающий формальное ведение проектов, записей и разные прочие [Задача]и. 
Оператор может стать таким помощником. На него можно взвалить напоминания, соблюдение workflow и методик.

++++Пример: Оператор через смартфон

Можно в качестве терминала Оператора использовать смартфон или планшет.
Если пользователь рядом с сервером (Дома, локальный пользователь), то связь через домашний вайфай-роутер.
Если пользователь далеко, то связь через интернет и GSM-провайдера.

Смартфон удобен тем, что пользователь не привязан к терминалу, а может находиться где угодно.
И на него также можно отправлять уведомления, вести чат. Только документы открывать и просматривать не так удобно. 

Локальный доступ можно через один только локальный вайфай роутер организовать.

Удаленный доступ будет дороговат для меня. Ежемесячно 300рублей за сим-карту смартфона и 600 рублей за интернет для Оператора. Плюс еще 300 рублей, если и Оператору тоже GSM-модуль выделить, чтобы он SMS отправлял и звонки принимал как автоответчик и секретарь. Ну это уж совсем роскошь.
А какая от этого польза? 

Если команды передавать Оператору через смартфон, то какие это будут команды?
Что мне потребуется от компьютера, вдали от компьютера?
- Это команды, когда я далеко от терминала, и не могу подойти к нему.

Можно развернуть систему на смартфоне, как клиент через мобильный Интернет, чтобы она была всегда при мне.
Достоинства:
* Я посылаю запросы и получаю ответы на улице почти так же как за домашним компьютером.
* Оператор мог бы работать автоответчиком и перенаправлять мне звонки и смс, скрывая мой текущий номер телефона.
Недостатки:
* сложно текст набирать.
* Надо платить за интернет и дома и на телефоне.

+++++Команды и ситуации для использования
Формат: <Место на улице> - <Описание действия>

Везде - прицепить к проекту или задаче фотку, аудио и видеозапись со смартфона, веб-ссылку или страницу, текстовый файл или заметку в виде текста.

В магазине - Инвентарь, получить наличие и количество предмета Х.

Везде - Запись заметки на тему, поиск заметки по теме, список заметок по теме.

Везде - Управление задачами: Получение списка задач, создание задачи, изменение состояния задачи, управление материалами для задачи: просмотр и добавление. Изменение и удаление со смартфона неудобно и небезопасно.
- изменение: реализовать как добавление новой версии материала.
- добавление: фоток, файлов, текстов, роликов в материалы задачи?

Везде - синхронизация списка тодо-задач со смартфоном, или же собственное ведение задач, более защищенное от утечки.

Везде - Запускать на сервере длительные приложения - конвертеры для больших объемов данных, и контролировать их выполнение.
*  Требует команды управления файлами и каталогами ФС, запуск консольных программ. Это что-то вроде терминала или RDP,
* Для удаленного выполнения работ. Сначала надо написать и протестировать конвертер, а потом уже удаленно его запускать, один проход за другим, как я конвертил мои коллекции итп.
Только тут нельзя толком оценить результаты процесса, чтобы сразу выявить ошибку в алгоритме. Тут можно только запускать приложение с аргументами и получать его вывод на экран и результат исполнения процесса.
* Для этого потребуется опция Уведомить меня о завершении процесса работы приложения. Она позволяет спать, пока конвертер работает, и просыпаться, когда он завершил работу аварийно или успешно, чтобы запустить новый проход конверсии.
* Это сэкономит несколько часов, когда я занят и не могу присутствовать и наблюдать за конвертером.
* Например, форматирование тома HDD занимает более часа. Но форматировать диски и удалять файлы допустимо только локально. А вот scandisk, defrag, итд - можно и удаленно. 
    * Можно форматировать диски - запускать процесс только локально, а наблюдать за его ходом и завершением через смартфон.
* Копировать файлы с тома на том через смартфон удаленно можно.

++++Пример: Автоматизация задач на компьютере
Я рассчитывал что Оператор будет выполнять автоматизацию операций. 
Автоматизировать надо выполнение мелких операций в предварительно настроенной инфраструктуре. Оператор задумывался как средство для такой автоматизации.
Именно он должен был включать в себя все эти работы, избавив меня от необходимости писать полноценные приложения, включающие в себя не только собственно процессинговый код, но и  файлы справок, иконки, итд. Эта мелочь занимает кучу времени.
Я мог бы писать только основной код, свалив все остальное на Оператор - там не нужны иконки и инсталляторы и все такое. 
Хотя с другой стороны, не было бы интеграции с рабочим столом. Я все-таки не работаю с консолью сейчас. Да и развертывание программы инсталлятором легкое. С Оператором было бы сложнее, это другой подход. 
Сейчас у меня работа над проектами сформировалась через концепцию рабочего стола, ярлыков и папок. 
Оператор это несколько другая концепция, и в ней работа с проектами выглядела бы иначе. Хотя я пока не знаю как именно. Наверно, мне пришлось бы помнить гораздо больше названий сущностей, чем сейчас. Сейчас я просто ищу их в тех местах, где они должны находиться, а не набираю в консоли запомненное точное название сущности.

Наверно, через Оператор можно все же автоматизировать некоторые операции. Особенно если Оператор будет в диалоговом режиме уточнять их параметры и запоминать умолчания. Но тут это скорее исполнение [Команда] пользователя. С КонтекстЗадачи. 

Можно автоматизировать настройку ОС в начале сеанса Пользователя. 
Например, яркость дисплея установить удобную. Или предварительно запускать постоянно используемые приложения. Это сэкономит время и еще чего-нибудь.
    * Только у меня нет таких постоянно используемых приложений. У меня большое разнообразие в работе.
* Еще напоминания, Задачи, Органайзер в целом. Это позволит решать [Задача]и, не забывать про них. Повысит мою реакцию на окружение.
    * Плохо, что они пока что только отнимают время на разработку, отладку, тестирование и совершенствование. 

Мне нужно сохранять сделанные мною настройки автоматизации, чтобы потом восстанавливать их автоматически, а не вручную, после переустановки операционной системы.


++++Пример: Работа с чужим окном
Работа с окном стороннего приложения через Оператора - назовем это Абордаж.
Это требует:
    * Указание и захват окна. Это можно реализовать одной [Команда]ой На абордаж.
    * Выполнение Оператором [Команда]ы для захваченного окна.
    * Освобождение захваченного окна [Команда]ой.
* Это требует КонтекстЗадачи, чтобы увязывать [Команда]ы и захваченное окно. А этого КонтекстЗадачи пока нет в Операторе.
* И Оператор, и окно - цель Абордажа должны быть видны на экране монитора. Для этого Оператор нужно сделать Topmost-окном (поверх всех окон всегда), как в моей экранной клавиатуре.

Достоинства:
* можно расширить функциональность любого текстового редактора через копирование, обработку и вставку в него текста.
* Можно автоматизировать типовые операции с диалогами - например, ресайзинг картинки в Paint.
Недостатки:
*  

++++Пример: Дополнение БД ответами на вопросы
Можно через Оператор отвечать на отложенные вопросы по заполнению свойств Сущностей для БД Оператора и других БД. Обычно пользователь может отложить определение некоторых свойств Сущностей, чтобы ускорить свою работу. А потом эти отложенные свойства запрашиваются у пользователя в свободное время. Вот такие вопросы можно задавать пользователю через Оператор по собственной Бд Оператора или Органайзера итд. Это подробнее описано в Органайзере.

++++Пример: Расчеты тематические
* можно использовать РИ как консоль проекта Матч. Хотя код Матч не пригодится никак, но вот строковые ресурсы и сами операции можно реализовать в Операторе. Чтобы просто набрать Вычислить энергию конденсатора, и ввести данные в речевом диалоге и получить результат. Это можно реализовать как код, в отдельной тематической сборке ПакетЗнаний.
    
++++Пример: Создание нового проекта
Надо связать мою утилиту создания нового проекта и Оператор.

Надо переделать утилиту создания нового проекта - пусть распаковывает папки и вики-шаблон из архива. И живет в собственной папке в МоиПроекты. (Тогда надо распаковывать эту папку после восстановления из бекапа, а то работать не будет.)

И надо бы для разных типов проектов разные шаблоны проектов делать - вики разные и папки разные. А тип проекта запрашивать после названия проекта, при создании проекта.
Это редко используемая функциональность.

++++Пример: Можно попробовать его продавать, привязав к веб-серверу. 
На сервер должны отправляться тексты запросов.
Чтобы можно было их накапливать и развивать проект.

Но вот это будет проблемой. 
Никому серьезно этот проект не нужен - сам он документы составлять не будет, сам он некоторую любую работу делать не будет.
Он просто удобнее, чем обычно. Ну и для домашнего использования - прикольный и только. Без него можно обойтись.

А тексты запросов - из-за винды 10 - пользователи не желают делиться ничем вообще.
Тем более - с частным лицом, то есть, мной.

Надо закосить под фирму.
ОКБ Тупой. 28 лет занимается реверс-инжинирингом техники, в том числе, военной и инопланетной.
Хохма,  а вдруг прокатит.

Хотя, если как самостоятельный продукт оно не интересно, то вот в сборе с модулями речи и модулями Органайзер - вполне сойдет в качестве собственно органайзера.
Можно будет даже имя придумать: Картонна. Хорошее имя для Dll: Cartonna

+++++Аргументы против распространения Оператора
Его нельзя раздавать ни в каком виде.
Он - мое конкурентное преимущество. Какое-никакое а лучше чем ничего.
Лучше я приделаю к нему чат на смартфон и буду держать Оператор на сервере домашнем.
А со смартфона [Команда]овать.
А так - узнают и в демо-версии украдут. 
Дома почти проходной двор. Оператор нельзя сейчас держать на компе. Но и никак иначе нельзя.
Что же придумать?
* можно хранить на флешке, постоянно вставленной
    * Просто флешку можно с собой забирать - проще чем ноут вычищать от Оператора.  
    * автостарт будет работать?
    * так украдут флешку вместе с ноутом. 
* todo: Придумать что-то в этом плане.

++++Пример: Собирать лог настроения
Тут вроде где-то в позапрошлом году была идея о том, чтобы периодически отчитываться себе о своем настроении.
Чтобы выявить сезонные его изменения и всякие там зависимости.
Эти отчеты должны быть привязаны к дате и храниться удобно для анализа.
Вот только вести их мне не получается - я про них забываю. Так что я и не начинал.
Надо подумать - можно ли эти отчеты взвалить на Оператор.
Он должен периодически предлагать мне такие короткие вопросы, когда я работаю с ним.
А я мог бы на них отвечать (или не отвечать) и они бы записывались в отдельную БД для последующего анализа.
Тут важно, чтобы они были короткими, не прерывали мою работу, и не надоедали.
И еще они нужны в разное время дня, так как утром настроение одно, вечером - другое.
Поэтому придется поэкспериментировать с подачей, моментом итд.
И из-за того что они неполные, и в разное время, статистика будет малополезной.
Но чтобы она была полезной, надо эти отчеты запрашивать по пять раз в день. А это меня сильно раздражать будет. Да и не сижу я за компом с 8 до 17 каждый день.
И вот как такую задачу можно реализовать на Операторе? 
    * Запускать по таймеру - неудобно - я не всегда же за компом, и текущую задачу прерывать нельзя.
    * Запускать в пределах временного диапазона, и потом отслеживать удобный момент для показа?
    * Запускать перед завершением Оператора - нельзя. Мне надо завершить быстро, а не отвечать на философские вопросы.
    * Запускать после запуска Оператора - неудобно. Хотя можно, но часто отвечать в этот момент нет настроения.
    * Надо запускать в такой момент расслабухи, когда работа закончена, и образовался небольшой перерыв. Но тут без свободного диалога и наблюдения за пользователем не получится это определить.
    * В общем, это сложная задача в настоящее время. Хотя грубое решение найти можно. 


++++Пример: Интегрировать со студией
Оператор надо интегрировать с вижуал студио. Или мне самому надо писать какие-то утилиты, которые будут работать с этой студией, или вместо этой студии, например запускать компилятор из [Команда]ной строки. Или преобразовывать граф в код [Алгоритм]а, а потом собирать все в файлы и компилировать. Кто будет разбираться с ошибками? Ошибка это следствие неправильно собранного [Алгоритм]а. Мне придется разбираться, почему [Алгоритм] был собран неправильно.  
Это большая работа, на которую у меня нет ресурсов. Поэтому сейчас надо сосредоточиться на практической части этой большой теории. 
Что мне даст Оператор, не считая загруженности на пару лет? Он позволит автоматизировать некоторые операции, которые я сейчас делаю. Я запускаю некоторые нужные программы для работы, для музыки итд, тыкаю по всяким ярлычкам и контекстным меню. А там я бы мог просто набирать текст. Или даже прицепить к нему звуковой анализатор и произносить текст голосом. Но тут работы тоже много, хотя все же проще, чем сейчас тыкать по всяким кнопочкам и меню. Это ведь надо разбираться, что куда относится, как организовано, и помнить, как это работает. Все это напрягает мозг, это работа, которвя мне не очень нужна, такая инфраструктурная работа. Как вот я сейчас перевожу записи диктофона в текст. А использовать их прямо как голосовые заметки - нет у меня условий, чтобы их прослушивать когда захочу. Да и поиска по ним нет. 
Интеграция с студией не прокатывает. Там еще нельзя получить Code DOM модель отдельно от студии. Хотя есть такие парсеры в проекте шарповой студии забыл как называется - она может сделать Code DOM модель из файла кода, и у нее есть исходные коды, откуда можно этот механизм выдрать. Тогда мы можем получить Code DOM модель из файла.  
Речевой интерфейс должен меня избавить от понимания, что там происходит в программе, от необходимости анализировать информацию и пользовательский интерфейс программы. Я просто вбиваю, что я хочу, и он делает. Ну хотя бы частично избавить, в этом случае он запускает приложение, с которым я в дальнейшем работаю. Но я могу писать новые приложения, где будет только речевой интерфейс, который избавит меня от этих менюшек и кнопочек. И можно будет легко и быстро делать автоматизацию этих операций.

Макросов что-ли наделать в студии для циклов и прочей хрени? Хотя это вряд ли хорошая идея. Надо еще помнить, к чему они там привязаны, как называются и что делают. Это потому, что я все время занимаюсь разными вещами. Много всяких разных проектов, поэтомму я не сосредоточен на одном виде деятельности. Это  убивает возможность существенно что-то автоматизировать. (Тут надо работать над уменьшением объема требуемых для выполнения работы знаний. Эта автоматизация должна уменьшать число элементов-знаний, задействованных при выполнении работы. Как вот подсчитать эти элементы-знания? ) Так как оно используется всего раз-два, то вся контекстная информация о наличии и свойствах возможности автоматизации операций очень медленно накапливается. 
Речевой интерфейс должен сократить это разнообразие используемых знаний, и облегчить автоматизацию работ. И для него надо сделать Тапп24.


++++Пример: Идея автоматизации ведения домашнего хозяйства
Получается идея автоматизировать часть работ по хозяйству.
Типа Умный дом, но более сложная штука, на семью из 1 и более человек.

Это такой комплект софта и оборудования, который повышает эффективность ведения домашнего хозяйства.
Вернее, разгружает владельца от части этих забот и их контекста.

Функциональность:
-Инвентарь - учет предметов в хозяйстве.
-Планировщик - получается АРМ владельца
-Органайзер - модульный: Контакты, Финансы, итп.
-Собственно автоматизация разных фишек умного дома - все управляется из одного места, так удобно настраивать.
-Хранилища контента? Типа фоток, музыки итп, Приватных видео...
-Без доступа в Интернет!
-Проекты - ведь придется своими руками делать полки, стулья, ремонт, итп.
На них, по-хорошему, надо делать проект, чертежи. Тогда в этом проекте можно хранить историю работ и удачные решения. 


++Материалы
+++Как улучшить процессы
Как сделать мою жизнь удобнее, используя компьютеры и вообще современную технику?
Как улучшить мои процессы с помощью компьютеров?

-Это надо описать процессы, а потом придумать, как их перестроить на современный лад.
- Еда, сон и туалет останутся все теми же. Перемещение тоже.
- Большую часть процессов никак не улучшить сейчас. Можно улучшить некоторые мелкие кусочки процессов вроде записывания идей или получение информации о температуре на улице. Хотя это не приносит непосредственной выгоды, но все же немного облегчает жизнь. Хотя, очень много возни с реализацией этих идей. Даже неясно, окупится ли она.

+++Расширение Проводника
Можно для файла или папки в Проводнике сделать меню Добавить в Оператор,  чтобы быстро создать Сущность (Место)
* Там в этих контекстных меню и так слишком много пунктов.
* Можно предложить ярлык нового места вынести на рабочий стол, а потом Оператор его подхватит и добавит себе как Сущность.
    * Это он как часто должен так просматривать ярлыки, чтобы подцепить новую Сущность сразу? Раз в минуту? Это неудобно.
    * Это громоздко для реализации и неочевидно для пользователя.

++++Оценка мира после пробуждения 
- Комп мог бы выдавать отчет о состоянии окружающего мира после пробуждения пользователя: температура наружного воздуха, влажность, погода, события за прошедший период, итд.
Для этого компьютер должен определять, когда пользователю нужен этот отчет. Пользователь должен ввести команду, лучше голосом, или со смартфона. Идти к клавиатуре для этого неудобно, надо что-то более непринужденное.

+++Предлагать книги для чтения
См. wikirel://../SpeakWiki/SpeakWiki.wiki?page=ФункциональностьПредлагатьКнигиДляЧтения - todo: надо переработать и сделать выводы по архитектуре Оператора.

+++Заметки на ходу
Я делаю заметки на ходу. 
Оператор мог бы собирать их и предоставлять мне для переработки, когда я за рабочим столом.
- То есть, надо подумать о концепции рабочего места, где я все эти заметки, задачи, итп, мог бы обрабатывать. Это включает в себя время, как расписание, необходимое на эту работу.
- однако, смартфон тут не годится, так как он все выгружает в гугл.
- А получится, как с диктофоном: заметок я надиктую много и быстро, а потом их обрабатывать буду авральным способом, и все равно останутся необработанные.
-- Но хотя бы они сохранятся, их можно соотнести с темами сразу же, а потом прослушивать по мере работы над темой. А так-то пока они будут лежать, конечно, кучей материала.

+++Быстрые заметки
-- Если компьютер доступен то я их набираю на компьютере. А если не доступен, то я их записываю текстом на бумаге.  Потом перепечатываю на компьютере.
-- Аудиозаписи на диктофоне делать проще и быстрее, но перепечатывать потом неудобно. Они должны быть короткими, а у меня они растягиваются в один непрерывный поток мышления вслух. Поэтому аудиозаписи не так удобны. как кажется. Для них нужно специально емко формулировать информацию, а не гнать черновики. Но если важно быстро записать информацию, то они - лучшее что есть сейчас.

+++Функциональность - Поиск при помощи Оператора
* Оператор мог бы искать файлы и папки и слова в них на диске и в инете. Просто передавать поисковый запрос в инет и в локальную службу поиска компьютера.
* Поиск файлов по имени лучше сделать собственным кодом, перебором. А то виндовый медленный и ненадежный.
* При поиске можно задавать пользователю уточняющие вопросы, чтобы повысить точность поиска или дополнительно обработать найденные элементы.
Собственно эти найденные элементы можно представить в виде списка и потом по этому списку с ними что-либо делать. 

+++Бекап моих проектов
* бекап проектов на архивный носитель, когда он подключен к компьютеру.
* требует утилиту бекапа или алгоритм бекапа.
* Требует контроль событий подключения-отключения дисков.

+++Оператор для осмотра проектов
Вот надо провести осмотр содержимого папки проекта Вордс.
Чтобы знать, что в ней лежит, что у меня есть такого, что можно использовать в других проектах.
А то папка большая стала, а что в ней - я уже забыл.
- 27 апреля 2018 г. 21:52 - осмотрел и вынес из него справочные материалы в отдельный проект. Там есть еще подпроекты, но их пока удобнее держать внутри. Вообще же, Вордс стал уже суперпроектом - темой. Сильно разросся, но так и не продвинулся вперед. Все время драйва не хватает, чтобы довести дела до конца.
И все остальные папки проектов так же хорошо бы инвентаризировать.
Это мог бы делать Оператор.

+++Регулировка яркости дисплея 
* регулировку яркости дисплея при запуске Оператора.
    * через канал событий, настраивать пользователем. 
* повышение яркости при запуске плеера для просмотра фильмов и понижение обратно при его завершении.
* Требует работающую подсистему команд и утилиту-регулятор яркости дисплея.
* Требует контроль запуска и завершения процессов в ОС.

+++Напоминания
Их даты и описания надо где-то хранить.
Вероятно, в отдельной таблице БД.
Такая схема с кучей таблиц не универсальна.
Но Тапп пока нет, а в нем бы это было более единообразно и проще поддерживать.
Напоминания удобно хранить в Органайзер - там можно приделать удобные формы для просмотра и редактирования напоминаний.
И хранить их в собственной БД по УАМХ, и получать к ним доступ через АПИ.
Но пока этого ничего нет. И Оператор не модуль Органайзер сейчас.

Хорошо бы иметь возможность откладывать напоминания на некоторое время. Чтобы они снова появлялись к определенному моменту (перерыву, например). Это касается напоминаний и уведомлений входящих событий вроде писем итп.

++++Свойства напоминания
* Дата начала
* Флаг Разбудить компьютер для этого
* Звуковой файл или сигнал.
* Текст сообщения напоминания
* todo: добавить здесь свойства напоминания. См. проект Органайзер.




+++Будильник и спящий режим 
* Сейчас можно разбудить ноутбук из Sleep режима в назначенное время.
* Сейчас можно усыпить ноутбук в любой момент.
* Компьютер может сам засыпать при неактивности, но это один единственный режим. 
    * И если компьютер нужен включенным постоянно, он сам засыпать не будет.
    * А если он не нужен постоянно включенным, то его можно настроить засыпать, и он будет засыпать при небольшом перерыве в работе пользователя. 
* Это можно использовать для создания Будильника.
* Можно ли это использовать для извещения о Напоминании?
* В какой момент ноутбук можно усыпить?
    * В случае, если пользователь скомандовал Спать. 
    * Не тогда, когда пользователь работает за ним.
    * Но зачем тогда вообще показывать напоминания, если пользователь не за компом?
* Можно создать ежедневное напоминание Будильника, для которого разбудить компьютер.
    * Например, будить меня в восемь утра.
        * А если я не проснусь, то что?
        * То будить еще раз. А потом заснуть до следующего будильника.
        *   
    * Только один момент можно в таймер пробуждения вписать.
    * При этом Оператор должен быть запущен.
    * Придется выбрать ближайшее напоминание с пробуждением компа, и его момент вписать в таймер пробуждения в БИОС.
    * После его срабатывания и перед засыпанием найти новое напоминание и его вписать так же.
    * Но тут есть сложности, это все надо на диаграмме представить и все варианты поведения разобрать.   
        * Комп разбужен и я разбужен им.
        * Комп разбужен а я не разбужен им.
        * Я включил комп до будильника.
        * ...  
* То есть, надо отслеживать момент входа пользователя, момент выхода пользователя, момент включения компьютера, момент выключения компьютера. И соответственно запускать таймер пробуждения, исходя из даты и имеющихся напоминаний.

+++Управление Задачами Органайзера
В системе нужно иметь возможность создавать и отслеживать [Задача]и. Это описано в Органайзер.
Нужен практический образец [Задача]и. Его надо придумать и тогда можно придумать и запросы и ответы и вообще всю механику.
Каковы требования к такому образцу [Задача]и?

+++Работа с Инвентарь
* поиск предметов в Инвентарь - пока хотя бы открытие Инвентарь с введенным запросом предмета. А вообще, Инвентарь уже пора переделать на новый АПИ для Оператора.
* Добавление предметов в Инвентарь.
* Вывод мест, где лежит предмет Инвентарь - это сложно, и требует новый УАМХ АПИ для Оператора.
* Можно реализовать как самостоятельный ПакетЗнаний.

+++Находить ТОДО-задачи в коде
Оператор мог бы находить ТОДО-задачи в моих C#-проектах и показывать их мне, когда я желаю поработать. (Над софтом именно?)
* Для этого он должен уметь определять, что некоторый каталог это каталог Солюшена. Чтобы показывать ТОДО привязанным к Солюшену а не непонятно откуда взятый. А то мне, может, этот Солюшен уже не актуален.
    * можно написать для этого функцию-метод.
    * метод какого класса, сборки? Как это вообще должно будет называться?
        * Это метаструктура поверх файловой системы. Например, МоиПроекты содержат папку проекта. Ее можно определить по паттерну - по файлу описания проекта. Для этого файла надо разработать формат файла и Блок Описания Проекта. БОП. Файл будет его содержать, и Оператор, прочитав этот файл, узнает, что это каталог проекта.
И этот каталог проекта может содержать C# проекты или архивы проектов. Которые Оператор и будет считать и анализировать. (И может ими управлять, если его научить.)
Для моего проекта в БОП можно описать схему - назначение подкаталогов и их содержимое. По этой схеме Оператор сможет анализировать содержимое проекта и управлять им.

* и как я буду запрашивать у Оператора такие запросы?
    * можно сделать менеджер задач - планировщик и команду вроде: А чем бы мне сейчас заняться? 

Все это сейчас представляется интересным, но пока годится только как наброски. Реальной необходимости в этом механизме нет. Сама система еще не готова и ее полезность чисто умозрительная. А работы тут много. И  сначала нужен Оператор. Потом уже будет ясно, какая польза от всех этих Идей...

+++Лог действий с файлами и папками в отдельных местах ФС
* мониторинг файлов и папок моих проектов - все изменения должны записываться в файл лога проекта, находящийся в корневой папке проекта. Есть возможность записывать события создания, удаления, изменение размера, переименования, смены прав доступа, смены атрибутов - для файлов и папок. Этот лог поможет восстановить историю работ по проекту при моем беспорядочном характере ведения работ.
    * При бекапе проектов это надо отключать, чтобы логи не портились. Хотя, возможно, не придется?
* ведение лога изменений папок моих проектов - а то я в них шарюсь (как бы это назвать... бардак развожу беспорядочными попытками что-то нарулить по-быстрому), иногда что-то меняю. Лог бы помог понять, что я в них делал и какие материалы новые, а какие старые.
    * лог надо отключать на время бекапа проектов.
* Требует контроль изменений в ФС.
* Требует хранить список мест контроля и управлять им.
* Сейчас эти папки недоступны, перемещены на флешку. Лог в них не нужен, наверное. Хотя, когда они доступны, можно вести в них лог. Только сам лог писать на винт, а то флешка быстро портится от частых записей.

+++Мелкая автоматизация
Надо в моих текстовых программах применять уже мелкую автоматизацию - некоторые задачи выполнять автоматически. С алгоритмами проблем вроде бы нет - какие-то полезные алгоритмы можно придумать.
Вопрос - как их вызывать из приложения?

В ворде или википаде они вызываются через главное меню типа тулс или сервис.
В других редакторах они также вызываются через контекстное меню окна текста, и доступны в зависимости от свойств кликнутого слова. Хотя это требует предварительного семантического анализа текста, это вполне удобно работает.

С алгоритмами штука в том, что они нужны в определенных ситуациях. Но пользователь не всегда знает/помнит о этих ситуациях и этих алгоритмах.
А еще пользователь должен понимать, что именно делает тот или иной алгоритм. Он должен это помнить, и это недостаток способа. 
И обязательно иметь возможность откатить сделанные алгоритмом изменения.

И эти алгоритмы в каждом приложении немного разные. Лучше было бы иметь один алгоритм на все приложения. Тогда было бы проще его запомнить.
- это следствие развития компьютерной среды. Раньше пользователь имел дело только с одной программой, и просто запоминал, что и как в ней работает. И алгоритмов этих было немного.
   Сейчас же я работаю с тысячей таких алгоритмов в сотне программ, и поэтому эта проблема у меня ощутима.
   Но разработчики по-прежнему это не считают проблемой, и не занимаются поиском решения.
   Поскольку они все так же работают над отдельной программой, сдать и забыть, а не пытаются с этим всем жить.
- Оператор мог бы делать такую работу - сам хранить алгоритмы и сам обрабатывать ими данные, беря их временно из приложений. Пользователь бы просто запоминал команды, а Оператор выполнял бы их в зависимости от типа данных, источника и приемника данных.

Этим алгоритмам нужно указать область действия - выделить кусок текста или отдать весь текст.
- я нигде не видел, чтобы алгоритм выделял кусок текста по некоторым признакам. Только поиск выделяет отдельные слова. А прямо часть текста - выделяет обычно сам пользователь, чтобы указать область для работы алгоритма.
Хотя можно было бы сделать такой метод - выделять кусок текста, содержащий определенные признаки, для его дальнейшей переработки.

Еще есть способ в автокад - консоль команд. Пользователь текстом набирает команды с параметрами, которые приложение затем выполняет. Тут пользователь должен помнить все эти команды и их параметры. Он не видит их через меню. Зато вводить их получается единообразно, и можно собрать команды в скрипт. И даже сделать чертеж только скриптом, из воображения, не используя гуй. 
Все-таки эти мелкие диалоги с параметрами сильно неудобны для интенсивного использования - они все одинаковые и их путаешь в ходе работы.

21.07.2018 04:12 
В Операторе есть хоткеи. Пока оператор запущен, можно, работая, например, в Блокноте, нажать некий хоткей Оператора. Оператор симулирует ввод Ctrl+A Ctrl+C в окне Блокнота. Получает текст из буфера обмена. Выполняет над ним работы, симулирует ввод Ctrl+A Ctrl+V в окне Блокнота, заменяя в нем текст на переработанный. Само окно Оператора при этом не показывается на экране. Пользователь даже не заметит этой работы. Просто по нажатию хоткея текст будет переработан.
Для пользователя это выглядит как новая возможность Блокнота. Хотя это же будет работать и для других редакторов текста.


