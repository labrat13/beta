++ Осмотр Состояния Проекта Оператор Версии 1

02.06.2019 01:19 
В общем виде, проект был сделан наскоро, поэтому он непродуман, теоретически не проработан. Это прототип, собранный из ранее созданных кусков, решений, созданных в разное время.
Это демонстратор идеи, он не годится для выполнения реальных работ.

++Рассмотренные темы
Результаты осмотра можно разделить на основные темы.

+++Внедрение БД
Это вопросы для разработки таблиц БД и индексов в них.
Оказалось, что БД уже добавлена в проект и используется в нем. Но только для хранения Сущностей. Поиск не проводится. 
++++1. Какие Сущности будут храниться в БД Оператора?
* Процедуры
* Места

++++2. Какие свойства у этих Сущностей?
+++++Свойства Процедуры:
* id int32 первичный ключ таблицы
* title string название процедуры для пользователя
* ves double   значение для сортировки по очередности процедур для исполнения
* regex string регулярное выражение
* path string  путь к исполняемой процедуре из внешней сборки
* cmd string   исходное выражение команды как пример для пользователя
* descr string текстовое описание команды

+++++Свойства Места:
* id int32 первичный ключ таблицы
* title string название места
* placetype string класс сущности места
* descr string текстовое описание
* path string веб-путь к сущности места или файловый путь - зависит от класса места.
* synonim string синонимы названия сущности
* entityTypes string список классов сущности

++++3. Какие операции для этих Сущностей?
* Сейчас Места и Процедуры загружаются из БД при старте приложения. Все данные распаковываются в память и уже в памяти проводится поиск и выборка мест и процедур. Пока сущностей мало, этот способ простой и быстрый. Для выборки процедур и мест с помощью БД потребуется существенно переработать весь механизм хранения свойств сущностей в БД, так как там много списков.

* Сейчас Адаптер БД содержит функции для работы с Сущностями:
    * GetAllPlaces() - получить все места из таблицы мест
    * AddPlace(Place p) - добавить новое место в таблицу мест
    * GetAllProcedures() - получить все процедуры из таблицы процедур
    * AddProcedure(Procedure p) - добавить новую процедуру в таблицу процедур.

++++4. Какие свойства Сущностей используются для поиска Сущностей?
* Для Процедур главное свойство - regex. 
    * Далее сама процедура должна определить, подходят ли ей переданные аргументы и прочие условия.
* Для Мест: 
    * Один из синонимов места, обозначающих Место в екстах запросов.
    * Тип Места (Класс места) - он пока не проверяется, но в будущем планируется сопоставлять и Классы Мест.
       
++++5. Какие операции поиска Сущностей существуют в проекте?
* выборка Процедур по совпадению regex и текста запроса. Это не получится сделать средствами БД сейчас.
* выборка Мест по названию места из запроса и одним из синонимов Места в БД. Синонимы сейчас хранятся так, что выборка Мест по ним средствами БД слишком сложна, проще все в памяти держать. Хотя, вероятно, возможна, как поиск по LIKE().

+++Места
* Часть мест уже устарела (изменились пути к файлам и каталогам) и нуждается в исправлении.
 Поэтому нужны команды для проверки доступности Мест, редактирования Мест, удаления Мест.
 Например, проверки существования Мест - каталогов, файлов, приложений. Доступности сети для веб-адресов. Итд. Эти проверки должны использовать Класс Места, а он пока не проработан для какого-либо использования.
 То же справедливо и для Процедур. Процедуры должны иметь еще что-то наподобие флага состояния (Активен), чтобы управлять процедурами, так как они могут быть незаконченными, неправильно работающими или еще как-то нежелательными для выборки и исполнения.
* Нужны команды для просмотра общего списка Процедур и Мест
 
+++КлассМеста
Я хочу использовать типы аргументов в работе Оператора. Это Классы Мест. Поэтому надо лучше эту тему проработать!
* Надо точнее определить, что такое эти Классы Сущностей, Классы Мест.
    * Что входит в КлассМеста?
    * Как обозначается КлассМеста?
    * Как хранится?
    * Как создать?
    * Как проверять наличие некоторого КлассМеста в Операторе?
    * Как изменять иерархию КлассМеста?
    * Как проверять непротиворечивость иерархии КлассМеста?
    * Как проверять отсутствие петель в иерархи КлассМеста?
    * Как присваивать КлассМеста  некоторому Месту?
    * Как называть КлассМеста, ведь эти названия должны быть уникальными внутри иерархии классов.
    * Могут ли названия КлассМеста совпадать с названиями Мест или Процедур?
    * Как автоматически определять КлассМеста для некоторого Места?
    * Как код может обрабатывать (использовать) КлассМеста?
    * Как удалять КлассМеста?
    * Как определить, что некоторый КлассМеста используется?
    * Как сделать работу пользователя с КлассМеста быстрой, удобной и без ошибок?
        * Пользователь сейчас должен вручную описывать КлассМеста для некоторого Места, внося его в БД. Это медленно, и дает ошибки. И не проверяется правильность указания КлассМеста для некоторого Места.
        * Нужны какие-то механизмы проверки правильности указания КлассМеста для Места. КлассМеста должен содержать некие указания, предельные значения или что-то такое, чтобы код мог определить, может ли указанный КлассМеста соответствовать указанному Месту. 
        * Этот много теоретической работы, а она мне обычно плохо удается.

+++Файл описания сущностей (ФОС)
Была идея собирать команды, процедуры, места и требуемые ресурсы, утилиты, итп - в Пакет Знаний. Чтобы переносить их на другой Оператор. Для того, чтобы хранить в Пакете Знаний свойства Процедур и Мест нужен Файл Описания Сущностей. (ФОС). Этот файл мог бы храниться в локальной сборке как ресурс, и извлекаться специальной функцией локальной сборки и вноситься в БД Оператора.
Пакет Знаний нужен для того, чтобы команды из некоторой предметной области собрать в один комплект и хранить или переносить в другой Оператор. 
    * Оператор должен уметь импортировать ПакетЗнаний.
    * Оператор должен уметь создавать ПакетЗнаний.
А в сборку ФОС предполагалось внедрять для того, чтобы хранить весь ПакетЗнаний одним файлом - собственно файлом сборки.
Но это неудобно, так как часто Процедуры используют дополнительные утилиты. Вот их надо размещать где-то внутри ПакетЗнаний, а после импортировния ПакетЗнаний - в каталоге утилит Оператора.
Еще одно неудобство - новые команды, производные от команд из ПакетаЗнаний, негде будет хранить. Только в БД. Оператор же не может внедрить новый ФОС в существующую сборку.
Поэтому решено отказаться от внедрения ФОС в ресурсы локальной сборки. Придется при экспорте ПакетЗнаний создавать ФОС как самостоятельный файл для ПакетЗнаний.
Значит, ПакетЗнаний должен быть каталогом или архивом, содержащим ФОС и другие файлы.
ФОС должен входить в состав ПакетЗнаний.
    * Оператор должен уметь создавать ФОС для ПакетЗнаний, выводя в него Сущности из своей БД.
    * Оператор должен уметь читать ФОС из ПакетЗнаний, добавляя в свою БД Сущности из ФОС.
* Надо разработать формат ФОС. Это будет файл xml. Набор полей примерно как у БД.

+++Неймспейсы
* Нужны неймспейсы для разделения Процедур и Мест на категории-группы.
* Надо добавить в свойства Мест и Процедур группировку по неймспейсам. Это вроде категорий. 
    * Придется держать в БД собственную таблицу для категорий, а в памяти собирать дерево категорий. 
    * Надо добавить набор команд для работы с этими неймспейсами-категориями.
* Надо придумать этим неймспейсам более удобное, краткое и понятное название.

 
+++Проблемы ведения проекта
* Весь проект кривой, код недопроектирован, неоптимален. Нет цельного понимания в проекте: он получается слишком перегружен семантической теорией, и расползается на отдельные эксперименты в семантике и ее применении.
    * Надо очертить границы проекта в основном документе проекта. Я так увлекаюсь отдельными моментами, и поект растягивается как резиновый.
    * Надо более четко контролировать функционал каждой версии Оператора.
    * Надо планировать развитие проекта, разбивать его на версии. Иначе я увязну в болотах семантической теории и ее экспериментах. Добавлять отдельные фичи раздельными версиями Оператора, чтобы не размывать видение проекта.
* Я совсем не умею работать с версиями в своих проектах. Вот в этот раз, исходный код Оператора в проекте был более старым, чем развернутый тестовый бинарник. Хорошо хоть я из архивов восстановил более новый код проекта. Но пометить разными версиями разные релизы я не удосужился. 
    * Надо более тщательно подходить к проектированию Оператора, заводить отдельную подверсию и документировать ее функциональность, для каждого эксперимента с семантикой в Оператор.
* У проекта не продуманы:
    * размещение Оператора
    * развертывание Оператора
    * настройка Оператора
    * хранение данных Оператора
    * бекапы проекта
    * управление версиями проекта
    * управление данными Оператора.
    * управление версиями наборов данных Оператора.
       

+++Проблемы теоретической части проекта
* Нельзя иметь два места с одинаковыми синонимами, так как они в словаре хранятся. Одинаковые синонимы мест нельзя иметь потому, что в запросе места должны указываться совершенно уникальными именами. Однако эта уникальность не проверяется сейчас никак. Но при загрузке из БД второй (омоним) вызывает крах приложения. Это вот проблема!
* Для Мест предусмотрены Классы Мест, но они сейчас не используются. Поскольку недостаточно опыта в работе с Классами Мест. 
* Предусмотрен запуск команд из локальных сборок. Есть тестовая команда для этого. Но пока не используется это практически. 
* Не продуманы вопросы по теории и исследованиям теории:
    * Как вести теоретические исследования?
    * Где записывать логи экспериментов и их результаты и выводы?
    * Как проводить и оформлять опыты с данными?
* Сейчас я совершенно не представляю себе, как вести в проекте значительные теоретические исследования.
Вероятно, для каждого такого исследования надо составить план, наметить цели. Потом надо бы выделить время и место на такой эксперимент. Создать для него экземпляр проекта Оператора, как прототип, под новой версией проекта, и внести в него требуемые изменения. Затем собрать наборы данных, провести собственно эксперимент, написать отчет и сделать выводы. Затем все это упаковать в архив и отправить в архив. 
    * Проблема в том, что такой эксперимент очень затягивается. Он растянется на полгода и более. Зато результаты будут более сконцентрированными, и не будет бардака с версиями, как уже было в проекте Тапп. И восстановить потом этот прототип и повторить эксперимент достаточно просто. И развивать его тоже просто. 
    * Проблема в том, как заставить себя соблюдать этот порядок. Эксперимент - он такой творческий, все скорей давай, пока не остыло. А тут - у меня все делается так медленно, что неизбежно остынет.
