++ Раздел Развитие Оператора
[template: ШаблонСтраницыРазделаКонцепции]
Состояние: [В РАЗРАБОТКЕ]

+++Ссылки раздела
* ГлоссарийОператор


+++Содержание раздела

Оператор в первоначальном плане подобен интерпретатору командной строки.
Это семантическая машина.
На первом этапе он должен просто выполнять заранее спроектированные и заложенные в него команды.
Затем Оператор, по мере развития, накапливает семантические единицы: Сущности и Действия.
На втором этапе в Оператор можно добавить анализатор смысла текстов, и он сможет выполнять более сложные, составные задания. 
Таким образом, Оператор это платформа для развития искусственного интеллекта. В начальном этапе он должен уметь выполнять некоторые работы, и это, таким образом, должно облегчить мне его развитие.
 

++Материалы

+++Общее развитие проекта
Оператор рассматривается как точка приложения усилий по разработке и развитию ИИ.
Пока это очень абстрактный план получается. На него потребуется около 20 лет по 220 дней по 8 часов работы над проектами.
1. Сначала собираем процедуры и сущности, учимся их хранить, организовывать и использовать.
2. Затем собираем алгоритмы различных процессов, в форме ЛентаСобытий, учимся их хранить, организовывать и использовать.
3. Затем собираем из множества ЛентаСобытий граф методов в Тапп, учимся его организовывать и использовать.
4. Затем совершенствуем все это, переработав в единообразную и удобную систему.
5. Затем приделаем мотивацию и самоорганизацию - вот уже нечто подобное И получается. Но ему еще нужен план развития.

+++Накопление функциональности
Оператор должен позволить мне постепенно копить способы выполнения работ.
Каждый такой способ, однажды воплощенный в [Процедура]у, избавляет меня от необходимости вспоминать или заново открывать законы, зависимости, способы и методики, сущности. Я просто запускаю [Команда]у и получаю результат. и использую его.
Мне нужно один раз изучить тему, разработать [Процедура]у, отладить ее, описать в документации. И все это затем можно забыть и просто пользоваться.

Нужен уже переход количества в качество.
* Резкого скачка не получается. Нужен постепенный переход - например, изготовление и накопление [Процедура]. Вот в долгосрочном масштабе времени это получается качественный скачок. Но это займет много работы.

+++Наполнение контентом
Я не смогу за приемлемое время сделать Оператор действительно полезным. 
Такая работа требует:
* много времени
* знание каждой отдельной темы
* знание работ с Оператором
* дополнения и оптимизации для этой темы, проводимые со временем.
Привлечь других людей к проекту я не могу. 
Для этого нужно предоставить им Оператор и его систему сущностей. 
Но нельзя терять контроль над системой.
Без усилий других людей я весь функционал Оператора должен буду делать сам.
Он будет еле-еле покрывать основные мои работы.

С другой стороны, привлекать других людей не имеет смысла, пока Оператор не готов для реальной работы.
Они все только портят обычно. Все равно придется самому делать всю работу.

Для работы Оператора с другими пользователями нужно будет создать публичные общедоступные каталог Сущностей и каталог [Процедура].
Либо Оператор работает локально на машине порльзователя с полными правами, либо он работает на своем сервере, а машина пользователя - просто терминал IRC или браузер.

+++Улучшения
Раньше знания считались ценностью - их было мало, а производительных сил - больше.
Сейчас знания - не такая уж ценность - их теперь получить легко (пока еще).
А вот производительные силы теперь сложно привлечь - кругом чужие интересы итд.
Поэтому теперь ценным является способность производить изменения в окружающем мире.

Мне сейчас наиболее ценным являются два пути:
- повышение производительности моего труда - я как производитель успеваю больше сделать или быстрее.
- приобретение дополнительных производителей - например, Оператор, роботов итд. 
Способных самостоятельно выполнять хотя бы отдельные работы.
Не считая работ по самообслуживанию, которыми я сейчас в основном занят.

Поэтому проект Оператор важен. Но он пока может только работать с тем, что заведено в компьютер.
И то это очень простые работы. И их алгоритмы мне самому приходится создавать.
Это нехорошо - надо чтобы я был действительно разгружен от работ, которые выполняет Оператор - а я вынужден писать для него программы, которые к тому же исполняются недостаточно повторно. Не получается существенной разгрузки от работ.

Чтобы была эта разгрузка, нужно заводить в Оператор сущности из речи, желательно прямо, чтобы Оператор понимал мою письменную речь.
Тогда я смогу более просто формулировать задачи итд.

Но это определенно очень сложный процесс. Мне нельзя пытаться охватить сразу все области работы.
Я должен сначала сосредоточиться на одной области моей деятельности, добиться в ней успехов и потом развить это на остальные области.
Тут сейчас надо описать это: надо найти область деятельности и попытаться описать, что я хочу в ней получить в этом плане и как это должно выглядеть.
Это такой набросок, концепт того что должно принести небольшое улучшение в моей деятельности.
Есть предложение сделать это для областей: Инвентарь и Задачи. Они взаимодополняют друг друга и позволят улучшить мои возможности по планированию и выполнению задач и проектов. И это знакомые мне, предметные области, в них у меня есть и начальные данные и немного опыта работы.
- То есть, Оператор надо для начала науськивать на работу с предметами как материальными ресурсами для задач, и проектами и задачами.
  Но станет ли он в итоге такого проекта исполнителем, который реальную работу выполняет, разгружая меня от части задач?
  Вроде как нет - планирование задач у меня пока достаточное, это не критически важно, а  выполнять работы по задачам все равно мне придется. 
  Это просто разгрузит меня от мелких работ, я про них забуду, и это может иногда заводить проекты в тупик, из-за несовершенства управляющей программы.
-  сейчас, если повезет, я из оператора могу сделать помощник, который требует непосредственного руководства, но способен выполнять несложные работы под моим контролем. На что-то более сложное нужны новые идеи и опыт их использования.

Для анализа текста потребуется большая база сущностей, классов сущностей итд. Ее можно заимствовать из текстов, но и ручной работы там много. Пока нельзя даже сказать, насколько много. 
-Ну вот, я уже увлекся мыслью, больших масштабов. А мне нужны решения практичные - небольшие, несложные, часто используемые. Они будут экономить мое время и улучшать мою производительность. Но пока ничего такого мне не вспоминается. 

+++Переделка на новую версию
Сейчас Оператор перенесен на новую ОС и ничего делать не может, так как [Место] и операций для этой системы у него нет. Его надо переделывать.

- Надо чтобы [Место]а и операции создавались и вручную и автоматически - сканированием папок и файлов, созданием коллекций определенного типа.
--Проблема в том, что сейчас [Место] намного больше, чем я могу запомнить, чем эффективно может оперировать эта технология. Но я мог бы отсеять совсем невостребованные [Место]а, и мне нужен поиск для таких редко используемых [Место].

-Надо сделать его в автозагрузку, чтобы он отслеживал события и выводил напоминания.
- Мне нужны напоминания о том что пора браться за другой проект. Они раз в две недели должны меняться. И даже можно предлагать тупо все проекты по очереди, что есть в папке проектов. Если не работать по проекту, то хотя бы написать причину или переработать существующую информацию проекта.
- можно бы просто запланировать работу над проектами вручную один раз, а потом только вносить изменения в общий план.
- Как это автоматизировать? Можно просто перебирать все проекты в системе. Или можно присвоить им важность, и более важные предлагать чаще. Но не подряд. Это позволит критичнее относиться к проектам и выбирать что-то другое, если неохота делать ничего.
--Чтобы перебирать, надо наладить автоматический разбор параметров проекта. Из файлов описаний проектов или из БД? Лучше из файлов описаний проектов. Иначе проекты придется создавать только через общую утилиту с БД.

Оператору нужна БД, где он будет хранить данные о сущностях, найденных на компьютере или введенных пользователем. 
Это нужно чтобы распознавать сущности по названиям в запросах пользователя.
Такая БД может быть реляционной, хотя Тапп удобнее.

Есть проблема: склонения названий сущностей. Сейчас пользователь вводит все формы названий сущности при создании новой сущности. При автоматическом создании сущности вводить склонения будет некому. Как это обрабатывать?

Эти сущности могут быть :
- вручную добавлены пользователем в Оператор.
- Найдены на компьютере специальными [Алгоритм]ами. Например, файлы музыки.
- выявлены прутем статистического анализа запросов пользователя.
- получены из Интернета как предварительно подготовленная база данных. Например, имена городов.


++++Сохранять модель небольшой
Изначально РИ ппроектировался как маленькая система, около 100 сущностей-мест и 1000 [Процедура].
Я намеревался ее в таком виде изучить, чтобы решить, что и как в ней.

Это просто небольшой прототип, который в основном предназначен для сбора запросов.

А я сейчас пытаюсь ее растянуть под ВСЕ свои нужды. На несколько тысяч сущностей. 
И соответствующее количество [Процедура]. Причем самых фантастических.

Это приводит к деформациям концепции. Надо сначала создать и отработать концепцию малой системы, прежде чем переходить к большой. 
А не все сразу и в куче.

Итак, сейчас делаем маленькую модель РИ. В какую предметную область можно ее применить, чтобы она была и небольшой, и достаточно полезной?
- Органайзер и Инвентарь?

++++Основательность проработки концепции
Надо прорабатывать концепцию прототипа сейчас. 
Очевидно, что, чтобы прототип был полезным в качестве Оператора, нужно наполнить его множеством [Место] и [Процедура], и их классов соответственно. 
Фактически это более тысячи элементов, особенно [Процедура]. 
Если в ходе эксплуатации выяснится, что нужно внести изменения в устройство [Место] и [Процедура], то придется переделывать все эти наработки на новый формат.   
Хотя все же нужно создавать эти штуки сейчас, а не ждать, когда будет готов идеальный концепт.
Поскольку польза проекта в его применении.
Но все же следует более тщательно прорабатывать концепцию, прежде чем заводить в нее сотни элементов, которые еще и не часто востребованы.
То есть, нужно в этом плане быть более основательным, и этому способствует нежелание переделывать все эти уже существующие элементы.

+++Вопрос функциональности Оператор
Тут есть вопрос: а для какой деятельности будет использоваться Оператор? Это важно, чтобы начать работу - надо собирать материалы для этого. Какие процессы происходят в этой области деятельности, какие из них можно переложить на Оператор?
- моя работа на компьютере. Уже рассмотрена ранее. Но вот ей не хватает  чего-то для ясности. Я вот сейчас делаю эти Хранилища, РеестрХранилищ, перерабатываю свои коллекции данных в справочники сущностей - вроде бы это часть подготовки данных для Оператора. Но как это все сложится в одно целое - непонятно пока. 




+++Оператор как служба Windows - решено отложить
Сейчас Оператор проектируется как приложение сеанса пользователя. 
Но было бы удобнее, если бы он был постоянно работоспособен, засыпая на время вероятного моего бездействия (когда я сплю). Круглосуточно 24х7х365.
Хотя, если он делает некую работу, например, качает что-то из интернета, или конвертирует большие данные, то он всю ночь может проработать без засыпания. Так что засыпать он должен во время своего бездействия более некоторого определенного времени.
    * question: Как определять, что Оператор бездействует?
        * Если все его потоки АгентИсполнитель спят более указанного времени (Обычно 30 минут).
        * Но Канал секунд регулярно будет работать, а еще, в нем могут быть будильники.
            * Тогда спать Оператор может до первого будильника, а сам канал часов можно не учитывать при определении бездействия.  
Еще, он мог бы выполнять функции будильника для меня, просыпаясь для подачи сигнала побудки.
Такой режим работы предполагает, что Оператор должен быть перезапущен, если он почему-либо прекратил работу.
    * сейчас сеанс лога не предполагает такой длинной работы. Хотя, его можно завершать перед засыпанием Оператора, но все же там нужно придумать лучшее решение.
Поэтому Оператор желательно реализовать как сервис Windows, который обменивается с GUI через именованные каналы или подобными средствами.
    * и еще потребуется приложение, которое будет следить за работой Оператор и перезапускать его при сбое. На него же можно повесить перезапуск Оператора ежесуточно для работы его по текущей схеме: принудительно закрывать Оператор и открывать его заново.
* Решение: Эту идею надо отложить на ТретийПрототипКонсолиРИ. Сейчас непонятно, что и как должно работать в Оператор. Служба Windows тоже не оптимальное решение в таких случаях. И у меня нет опыта в работе с ними.

