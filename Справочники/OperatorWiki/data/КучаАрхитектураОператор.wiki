++ Куча Архитектура Оператор

++Материалы, требующие согласования с другими частями концепции
+++АПИ процедур
Так как [Процедура]ы должны выводить в лог проводимые операции, а эти операции выполняются часто просто кодом [Процедура]ы, то надо связать операцию и вывод в лог.
Чтобы не возиться в каждой [Процедура]е с этими сообщениями для лога.
Значит, собственно операции надо сделать частью механизма, и вызывать их оттуда. 
Они сами будут формировать строку для записи в лог и сами выводить в лог и сами сообщать в лог об ошибках.
Значит, механизм будет содержать набор операций для [Процедура]. АПИ для [Процедура].
Тогда и лог будет вестись, и отладка будет проще, и [Процедура]ы будет проще писать - не надо придумывать решения заново.
Надо это обдумать. Сейчас [Процедура] мало.
* Сейчас решено, что вывод в лог Процедура делает через объект АгентИсполнитель.    
    
+++Многозадачность
* todo: См. КонцепцияМногозадачностиОператора - извлечь общие сведения о многозадачной архитектуре Оператор, которые надо учитывать в общем проектировании архитектуры Оператор.

+++1
Тут пока только идеи по развитию прототипа.
* Нужно не просто исполнять [Команда]ы, а иметь возможность собирать их в скрипты [Алгоритм]ов. И хранить эти скриптовые [Алгоритм]ы, и исполнять их так же, как одиночные [Команда]ы. Тогда это будет более мощная штука, чем сейчас.
* Еще нужно ввести поддержку событий. Например, ввод [Команда]ы - событие. Новая минута часов - событие, для будильника и планировщика.
* Каждому событию нужен свой именованный канал в системе, как абстракция.
* Еще нужно ввести контексты событий. Каждое событие сопровождается контекстом. 
* Каждое сообщение от и к пользователю должно быть привязано к контексту. Это такая субсессия пользователя. Все субсессии входят в сессию пользователя. Субсессия начинается по первой [Команда]е пользователя и заканчивается при завершении [Процедура]ы. А возможно, и при слишком долгом перерыве в ожидании [Команда].

