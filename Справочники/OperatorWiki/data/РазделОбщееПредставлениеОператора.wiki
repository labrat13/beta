++ Раздел Общее Представление Оператора
[template: ШаблонСтраницыРазделаКонцепции]
Состояние: [В РАЗРАБОТКЕ]

+++Ссылки раздела
* ГлоссарийОператор


+++Содержание раздела



+++Материалы

+++Первые наброски
Запросы к РИ

Создать заметку
Открыть студию
Открыть Блокнот
Создать Задачу
Найти строкузапроса

Тут сначала надо сделать некую форму, и чтобы она работала хотя бы в примитивных случаях.
Тогда я смогу ею пользоваться, и буду в нее всякие запросы печатать.
А то сейчас не придумывается ничего - все слишком абстрактно.
Эта форма будет собирать запросы, а потом я их осмотрю и подумаю.

Устройство
Запрос набивается в некотором текстовом окне.
Этот запрос отправляется в некий процессор, который ищет в БД функцию, которая выполнит этот запрос.
Еще эта же функция бы и сам запрос разбирала и определяла, для нее он или нет.
Но как тогда выбирать лучшую функцию для запроса?.

Есть такая штука - КонтекстЗадачи. Его надо где-то хранить.
Его нужно использовать при работе в обе стороны 
 процесса - и при приеме [Команда], и при выдаче ответа пользователю.
И функции подбирать согласно этому КонтекстЗадачи.

Но тут есть проблема - живой секретарь может выявить КонтекстЗадачи, наблюдая за пользователем, по обстановке.
А компьютер не видит пользователя, и не может инициализировать КонтекстЗадачи.
Пользователь должен тогда сам обозначать КонтекстЗадачи. 
Фразами вроде: А сейчас давай посмотрим кино. Какой фильм у нас есть и мы его давно не смотрели?
Это такое общение, а не ручное управление, как обычно.


15 июля 2016
Вот если бы у меня не было других проектов, я мог бы сделать консольное приложение, которое бы запускалось и постоянно работало в течение сеанса пользователя. 
Пока оно бы просто собирало введенные в него запросы. Хотя запросы вводились бы редко и только в целях развития проекта.
Потом можно было бы собрать накопленные идеи и материалы и потребности, свести их в концепцию и дополнить это приложение-консоль функциональностью. Это увеличило бы использование проекта и дало бы от него отдачу. В виде экономии усилий и единообразия действий.
Потом можно было бы еще более улучшить проект, сделав его действительно полезным.
А сейчас это не работает потому, что другие проекты надо делать. И они занимают это время и пространство идей.
Хотя можно начать проект, хотя бы как эксперимент. Чтобы проверить идею.  

+++Командный интерпретатор
Была идея сделать из этого проекта командный интерпретатор подобный cmd.exe. Но пока это сделать нельзя, поскольку сейчас нет КонтекстЗадачи. В интерпретаторе КонтекстЗадачи заключался в текущем каталоге, относительно которого вся работа и велась. Пользователь сам должен помнить, зачем он туда пришел и что он там делал ранее.
В моем приложении сейчас нет КонтекстЗадачи, и негде хранить эту строку текущего каталога.
А сама идея вроде хорошая, можно потом опробовать. 

+++Представление о устройстве Оператор
Оператор должен не просто запускать программы - он должен выполнять вычисления и оперировать данными самостоятельно. Это что-то вроде большого интерпретатора, соединенного  с хранилищами данных и хранилищами методов обработки данных.
Конечно, я не могу сам все это делать, я должен использовать уже существующие утилиты и программы, веб-сервисы итд. Это все слишком сложно. Но тогда получается, Оператор это некий скелет, на который навешиваются различные скрипты, шлюзы к другим сервисам, созданные пользователем скрипты-методы, итд. И вот эту всю систему надо поддерживать, устранять конфликты, проверять правильность вычислений итд. Это работа на много тысяч человеко-часов. Это сегодня для меня неприемлемо.
Надо думать что-то другое. Надо что-то такое, чтобы я мог, ежедневно работая с Оператором, выполняя в нем свои задачи, этим самым улучшать его. А сейчас это просто набор скриптов и соотношений между сущностями, который я еще должен вручную создавать, отлаживать и поддерживать.
Вообще, сейчас Оператор очень примитивный даже как концепт.  
- Это надо разработать такой концепт, чтобы сущности, отношения и сами скрипты создавались как следствие выполнения моих работ в Операторе. И затем их можно было повторить, воспроизвести и анализировать или хотя бы просмотреть лог. Это что-то из проекта лент. И Тапп.
--Тогда я смогу наращивать Оператор по мере работы с ним, и иногда добавлять ему данных и методов целенаправленными заливками найденных и переработанных мною коллекций. 
- Оператору нужен интерпретатор для исполнения методов, которые он выполняет для пользователя. Чтобы пользователь мог создать новый процесс, отладить его и сохранить в Операторе. А потом при необходимости модернизировать. И таких процессов должно быть много. И они должны считаться именно процессами, своей терминологией.

+++Оператор как часть ИИ
Оператор ориентирован на действия. 
Ему нужны сущности, чтобы распознавать их в [Команда]ах
Ему нужны типы сущностей, чтобы распознавать сущности в [Команда]ах точнее.
Но все это не ИИ. Этот механизм нельзя обучить - он не накапливает знания о выполненной работе. Можно только самому реализовывать его единицы поведения, написав скрипты.


+++Оператор организация
Оператор мог бы использовать не прямое соответствие Запрос-Операция, как сейчас, а более сложное, создающее промежуточную среду, в которой осуществляется выбор операции исходя из контекста и запроса.
Но такая работа регулярно будет создавать ситуации, в которых эти операции будут выбираться неправильно. 
Даже если пользователь наблюдает за ходом такой операции. То есть, ему надо вывести описание принимаемых Оператором решений, граф [Алгоритм]а, для контроля выполнения. И все равно, пользователь не сможет заметить мелкие особенности работы. 
Поэтому  изменения, которые вносит выполнение операции, нужно иметь возможность откатить.
Это важная фича для Оператора, и ее надо дополнительно обдумать.  

+++Заметка о операторе
Моя жизнь состоит из тысяч небольших дел.
Купить эту работу я не могу - нет денег.
Если задачи не делаю я, их не делает никто.
Поэтому надо автоматизировать все что можно.
Чтобы уменьшить число работ, которые не будут сделаны.

Но это надо сделать так, чтобы эти автоматизации сами не превратились в кучу задач.
Чтобы в итоге количество задач уменьшилось, а не увеличилось.

Все мои программы теперь должны работать с Оператором.
Надо разработать методику такого взаимодействия.
Как Оператор может работать с программами вообще?
А) вызывать и передавать параметры через командную строку. 
- Принимать код завершения программы.
- Принимать результаты работы, сохраненные во внешних файлах
Б) изменять данные программы через специальный АПИ.
В) изменять данные непосредственно в файле, не запуская программу.
Г) отправлять окну программы сообщения и симулировать нажатия клавиш.
Метод В зависит от версии программы и может совершенно испортить данные.
Метод В очень трудоемок для чужих программ.
Метод Б трудоемок для чужих программ. 
Метод А зависит от версии программы.
Метод Г удобен для чужих программ, но зависит от версии программы.

В следующей версии надо бы реализовать исполнение скриптовых файлов в качестве [Команда].
Скриптовый файл состоит из [Команда] Оператору, собранных в [Алгоритм] подобно пакетному файлу.
Скриптовый файл можно назначить вместо исполняемоо файла в [Процедура]е.
Ему передаются параметры из [Команда]ной строки. 
Внутри скриптового файла эти параметры подставляются в нужные [Место]а.  
Можно их как переменные представить.
Скриптовый файл может содержать переменные ? и переходы на метки? И условные переходы?
Или пока не будем это делать, а просто тупо последовательность [Команда] исполнять?
Это все вообще надо для того, чтобы подготовиться к внедрению скриптов как исполнителей [Процедура].
А потом надо будет семантический анализ [Команда] сделать.
Сейчас я просто не могу представить себе, как установить соответствие между словоформами и дейсвиями, сущностями, условиями.
Как это соответствие записать. Как это соответствие сохранить в БД. 
Как транслировать текст [Команда]ы в комплект действий, сущностейи условий. 
Сейчас я пока собираю тексты [Команда] как материалы для такого анализа. 

Тут получается такая штука: или я делаю библиотеку функций кода для использования их внутри сборок [Процедура].
Или я делаю повторное использование [Команда] Оператора в виде скриптов и вызовов [Процедура] из кода.
Но в любом случае, мне придется использовать студию при работе с Оператором.
Так как это не интерпретатор, поэтому я должен скомпилировать проект после внесения изменений.
С# дает мне доступ к функциональности операционной системы, который я не получу из языков-интерпретаторов.
